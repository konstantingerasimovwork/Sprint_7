{"name": "Проверка создания заказа", "status": "broken", "statusDetails": {"message": "pydantic.error_wrappers.ValidationError: 1 validation error for PostSchema\ntrack\n  field required (type=value_error.missing)", "trace": "self = <test_order.test_create_order.TestCreateOrder object at 0x10dba8490>, color = 'BLACK'\n\n    @allure.title('Проверка создания заказа')\n    @allure.description('BUG: Тест падает, если передавать только 1 цвет, с 2-мя цветами тест проходит')\n    @pytest.mark.parametrize('color', ['BLACK', 'GREY', ['BLACK', 'GREEN'], ''])\n    def test_create_order(self, color):\n        payload = {\n            \"firstName\": \"Konstantin\",\n            \"lastName\": \"Grasimov\",\n            \"address\": \"Odesskaya,21\",\n            \"metroStation\": \"4\",\n            \"phone\": \"+7 800 355 35 35\",\n            \"rentTime\": 5,\n            \"deliveryDate\": \"2020-06-06\",\n            \"comment\": \"Comment\",\n            \"color\": [color]\n        }\n        self.new_order.post_request(payload)\n        response_status_code = self.new_order.check_response_status_code()\n        response_text = self.new_order.check_response_text()\n>       PostSchema.parse_obj(response_text)\n\ntests/test_order/test_create_order.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npydantic/main.py:526: in pydantic.main.BaseModel.parse_obj\n    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n>   ???\nE   pydantic.error_wrappers.ValidationError: 1 validation error for PostSchema\nE   track\nE     field required (type=value_error.missing)\n\npydantic/main.py:341: ValidationError"}, "description": "BUG: Тест падает, если передавать только 1 цвет, с 2-мя цветами тест проходит", "steps": [{"name": "Создаём заказ", "status": "passed", "parameters": [{"name": "payload", "value": "{'firstName': 'Konstantin', 'lastName': 'Grasimov', 'address': 'Odesskaya,21', 'metroStation': '4', 'phone': '+7 800 355 35 35', 'rentTime': 5, 'deliveryDate': '2020-06-06', 'comment': 'Comment', 'color': ['BLACK']}"}], "start": 1710008553496, "stop": 1710008553724}, {"name": "Получаем статус код", "status": "passed", "start": 1710008553724, "stop": 1710008553724}, {"name": "Получаем содержимое ответа", "status": "passed", "start": 1710008553725, "stop": 1710008553725}], "parameters": [{"name": "color", "value": "'BLACK'"}], "start": 1710008553495, "stop": 1710008553725, "uuid": "9b37dfc7-3a11-4a49-8666-7543c52f6461", "historyId": "94c710880b52ef0965d1d7a7c925caf8", "testCaseId": "998c825fe5b65f1eb8f946f4a780cb98", "fullName": "tests.test_order.test_create_order.TestCreateOrder#test_create_order", "labels": [{"name": "parentSuite", "value": "tests.test_order"}, {"name": "suite", "value": "test_create_order"}, {"name": "subSuite", "value": "TestCreateOrder"}, {"name": "host", "value": "MBP-MacbookPro"}, {"name": "thread", "value": "5607-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_order.test_create_order"}]}